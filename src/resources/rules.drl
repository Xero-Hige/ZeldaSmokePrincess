package ar.higesoft;
import ar.fi.uba.celdas.Perception;

dialect  "mvel"

declare Choices
    created: Boolean = true

    mustGoRight: Boolean = false
    mustGoLeft: Boolean = false
    mustGoUp: Boolean = false
    mustGoDown: Boolean = false

    mustAttack: Boolean = false
    canAttack: Boolean = false

    shouldGoUp: Boolean = false
    shouldGoDown: Boolean = false
    shouldGoLeft: Boolean = false
    shouldGoRight: Boolean = false

    enemyUp: Boolean = false
    enemyDown: Boolean = false
    enemyRight: Boolean = false
    enemyLeft: Boolean = false

    goRight: Boolean = false
    goLeft: Boolean = false
    goDown: Boolean = false
    goUp: Boolean = false
    attack: Boolean = false
end


rule creation
    when
        not Choices(created)
    then
        insert(new Choices())
end


rule "Must go right Key"
    when
        $choice:Choices(created , !mustGoRight)
        world:WorldStatus (player_column < key_column,!hasKey,!enemyRight)
    then
        modify($choice){setMustGoRight(true)}
end

rule "Must go Left Key"
    when
        $choice:Choices(created, !mustGoLeft)
        world:WorldStatus (player_column > key_column,!hasKey,!enemyLeft)
    then
        modify($choice){setMustGoLeft(true)}
end

rule "Must go Down Key"
    when
        $choice:Choices(created,!mustGoDown)
        world:WorldStatus (player_row < key_row,!hasKey,!enemyDown)
    then
        modify($choice){setMustGoDown(true)}
end

rule "Must go Up Key"
    when
        $choice:Choices(created,!mustGoUp)
        world:WorldStatus (player_row > key_row,!hasKey,!enemyUp)
    then
        modify($choice){setMustGoUp(true)}
end


rule "Must go right Door"
    when
        $choice:Choices(created , !mustGoRight)
        world:WorldStatus (player_column < door_column,hasKey,!enemyRight)
    then
        modify($choice){setMustGoRight(true)}
end

rule "Must go Left Door"
    when
        $choice:Choices(created,!mustGoLeft)
        world:WorldStatus (player_column > door_column,hasKey,!enemyLeft)
    then
        modify($choice){setMustGoLeft(true)}
end

rule "Must go Down Door"
    when
        $choice:Choices(created,!mustGoDown)
        world:WorldStatus (player_row < door_row,hasKey,!enemyDown)
    then
        modify($choice){setMustGoDown(true)}
end

rule "Must go Up Door"
    when
        $choice:Choices(created,!mustGoUp)
        world:WorldStatus (player_row > door_row,hasKey,!enemyUp)
    then
        modify($choice){setMustGoUp(true)}
end


rule "Go right"
    when
        world:WorldStatus(canGoRight)
        $choice:Choices(mustGoRight,!goRight)
    then
        modify($choice){setGoRight(true)}
end

rule "Go Left"
    when
        world:WorldStatus(canGoLeft)
        $choice:Choices(mustGoLeft,!goLeft)
    then
        modify($choice){setGoLeft(true)}
end

rule "Go Down"
    when
        world:WorldStatus(canGoDown)
        $choice:Choices(mustGoDown,!goDown)
    then
        modify($choice){setGoDown(true)}
end

rule "Go Up"
    when
        world:WorldStatus(canGoUp)
        $choice:Choices(mustGoUp,!goUp)
    then
        modify($choice){setGoUp(true)}
end


rule "Can Atack"
    when
        $choice:Choices(created,!canAttack)
        world:WorldStatus(facingElement == "2")
    then
        modify($choice){setCanAttack(true)}
end


rule "Enemy Up"
    when
        $choice:Choices(created,!enemyUp)
        world:WorldStatus(enemyUp)
    then
        modify($choice){setEnemyUp(true)}
        modify($choice){setMustGoDown(!$choice.getEnemyDown())}
        modify($choice){setMustGoUp(!$choice.getEnemyUp())}
        modify($choice){setMustGoLeft(!$choice.getEnemyLeft())}
        modify($choice){setMustGoRight(!$choice.getEnemyRight())}

end

rule "Enemy Down"
    when
        $choice:Choices(created,!enemyDown)
        world:WorldStatus(atPlayerDown == "2")
    then
        modify($choice){setEnemyDown(true)}
        modify($choice){setMustGoDown(!$choice.getEnemyDown())}
        modify($choice){setMustGoUp(!$choice.getEnemyUp())}
        modify($choice){setMustGoLeft(!$choice.getEnemyLeft())}
        modify($choice){setMustGoRight(!$choice.getEnemyRight())}
end

rule "Enemy Left"
    when
        $choice:Choices(created,!enemyLeft)
        world:WorldStatus(enemyLeft)
    then
        modify($choice){setEnemyLeft(true)}
        modify($choice){setMustGoDown(!$choice.getEnemyDown())}
        modify($choice){setMustGoUp(!$choice.getEnemyUp())}
        modify($choice){setMustGoLeft(!$choice.getEnemyLeft())}
        modify($choice){setMustGoRight(!$choice.getEnemyRight())}
end

rule "Enemy Right"
    when
        $choice:Choices(created,!enemyRight)
        world:WorldStatus(enemyRight)
    then
        modify($choice){setEnemyRight(true)}
        modify($choice){setMustGoDown(!$choice.getEnemyDown())}
        modify($choice){setMustGoUp(!$choice.getEnemyUp())}
        modify($choice){setMustGoLeft(!$choice.getEnemyLeft())}
        modify($choice){setMustGoRight(!$choice.getEnemyRight())}
end


rule "Trapped Right"
    when
        world:WorldStatus(!canGoRight)
        $choice:Choices(mustGoRight,!mustGoDown)
    then
        modify($choice){setMustGoDown(true)}
end

rule "Trapped Down"
    when
        world:WorldStatus(!canGoDown)
        $choice:Choices(mustGoDown,!mustGoLeft)
    then
        modify($choice){setMustGoLeft(true)}
end

rule "Trapped Left"
    when
        world:WorldStatus(!canGoLeft)
        $choice:Choices(mustGoLeft,!mustGoUp)
    then
        modify($choice){setMustGoUp(true)}
end

rule "Trapped Up"
    when
        world:WorldStatus(!canGoUp)
        $choice:Choices(mustGoUp,!mustGoRight)
    then
        modify($choice){setMustGoRight(true)}
end


rule "Should go down?"
    when
        $choice:Choices(created,!shouldGoDown)
        world:WorldStatus(timesVisitedDown <= timesVisitedLeft , timesVisitedDown <= timesVisitedRight , timesVisitedDown <= timesVisitedUp)
    then
        modify($choice){setShouldGoDown(true)}
end

rule "Should go up?"
    when
        $choice:Choices(created,!shouldGoUp)
        world:WorldStatus(timesVisitedUp <= timesVisitedLeft , timesVisitedUp <= timesVisitedRight , timesVisitedUp <= timesVisitedDown)
    then
        modify($choice){setShouldGoUp(true)}
end

rule "Should go left?"
    when
        $choice:Choices(created,!shouldGoLeft)
        world:WorldStatus(timesVisitedLeft <= timesVisitedDown, timesVisitedLeft <= timesVisitedRight , timesVisitedLeft <= timesVisitedUp)
    then
        modify($choice){setShouldGoLeft(true)}
end

rule "Should go right?"
    when
        $choice:Choices(created,!shouldGoRight)
        world:WorldStatus(timesVisitedRight <= timesVisitedLeft , timesVisitedRight <= timesVisitedDown , timesVisitedRight <= timesVisitedUp)
    then
        modify($choice){setShouldGoRight(true)}
end


rule "Set Atack"
    salience 200
    when
        choice:Choices(canAttack)
        world:WorldStatus()
    then
        world.setAction(0);
end

rule "Set Left"
    salience 100
    when
        choice:Choices(!canAttack,goLeft)
        world:WorldStatus()
    then
        world.setAction(1);
end

rule "Set Right"
    salience 100
    when
        choice:Choices(!canAttack,goRight)
        world:WorldStatus()
    then
        world.setAction(2);
end

rule "Set Down"
    salience 100
    when
        choice:Choices(!canAttack,goDown)
        world:WorldStatus()
    then
        world.setAction(3);
end

rule "Set Up"
    salience 100
    when
        choice:Choices(!canAttack,goUp)
        world:WorldStatus()
    then
        world.setAction(4);
end


rule "Semi Set Left"
    salience 50
    when
        choice:Choices(!canAttack,shouldGoLeft)
        world:WorldStatus(canGoLeft)
    then
        world.setAction(1);
end

rule "Semi Right"
    salience 50
    when
        choice:Choices(!canAttack,shouldGoRight)
        world:WorldStatus(canGoRight)
    then
        world.setAction(2);
end

rule "Semi Down"
    salience 50
    when
        choice:Choices(!canAttack,shouldGoDown)
        world:WorldStatus(canGoDown)
    then
        world.setAction(3);
end

rule "Semi Up"
    salience 50
    when
        choice:Choices(!canAttack,shouldGoUp)
        world:WorldStatus(canGoUp)
    then
        world.setAction(4);
end